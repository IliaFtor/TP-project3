import os
import psutil
import subprocess
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import locale
import requests
import json

os.system("chcp 65001")  
locale.setlocale(locale.LC_ALL, "")  
with open("./config.json", "r", encoding="utf-8") as file:
    parsed_data = json.load(file) 

bot = Bot(token=parsed_data["Bot"]["BOT_TOKEN"])
dp = Dispatcher(bot)

@dp.message_handler(commands=['run'])
async def execute_command(message: types.Message):
    command = message.get_args()
    if not command:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /run dir")
        return

    try:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ PowerShell
        result = subprocess.check_output(command, shell=True, text=True, stderr=subprocess.STDOUT)
        await message.reply(f"–†–µ–∑—É–ª—å—Ç–∞—Ç:\n```\n{result}\n```", parse_mode="Markdown")
    except subprocess.CalledProcessError as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:\n```\n{e.output}\n```", parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞: –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
@dp.message_handler(commands=['status'])
async def system_status(message: types.Message):
    cpu = psutil.cpu_percent()
    memory = psutil.virtual_memory().percent
    disk = psutil.disk_usage('C:\\').percent  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏—Å–∫–∞ C:
    await message.reply(
        f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:\n"
        f"üñ• CPU: {cpu}%\n"
        f"üíæ RAM: {memory}%\n"
        f"üìÇ –î–∏—Å–∫ C: {disk}%"
    )
@dp.message_handler(commands=['temp'])
async def get_hardware_monitor_data(message: types.Message):
    try:
        url = "http://localhost:8085/data.json"
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        def parse_hardware(hardware):
            """–ü–∞—Ä—Å–∏—Ç JSON –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
            output = []
            name = hardware.get('Text', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ')
            for child in hardware.get('Children', []):
                if 'Value' in child and child['Value']:
                    output.append(f"{child['Text']}: {child['Value']}")
                if 'Children' in child:
                    output.extend(parse_hardware(child))
            return output

        # –ü–∞—Ä—Å–∏–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        result = []
        for device in data.get('Children', []):
            device_name = device.get('Text', '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ')
            device_data = parse_hardware(device)
            if device_data:
                result.append(f"*{device_name}*\n" + "\n".join(device_data))

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if result:
            await message.reply("\n\n".join(result), parse_mode="Markdown")
        else:
            await message.reply("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except requests.exceptions.RequestException as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenHardwareMonitor: {e}")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")



# –ö–æ–º–∞–Ω–¥–∞: –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã
@dp.message_handler(commands=['processes'])
async def list_processes(message: types.Message):
    processes = [(p.info["name"], p.info["cpu_percent"]) for p in psutil.process_iter(attrs=["name", "cpu_percent"])]
    processes = sorted(processes, key=lambda x: x[1], reverse=True)[:10]  # –¢–æ–ø 10 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    process_list = "\n".join([f"{name}: {cpu}%" for name, cpu in processes])
    await message.reply(f"üîç –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ CPU:\n```\n{process_list}\n```", parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
@dp.message_handler(commands=['shutdown'])
async def shutdown_system(message: types.Message):
    await message.reply("üõë –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã...")
    os.system("shutdown /s /t 0")  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Windows

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö (—Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å)
async def notify_critical():
    import asyncio
    while True:
        cpu = psutil.cpu_percent()
        memory = psutil.virtual_memory().percent
        if cpu > 90 or memory > 90:
            await bot.send_message(
                chat_id="–≤–∞—à_chat_id",
                text=f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞:\n"
                     f"CPU: {cpu}%\nRAM: {memory}%"
            )
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import asyncio
    loop = asyncio.get_event_loop()
    loop.create_task(notify_critical())  # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    executor.start_polling(dp)
